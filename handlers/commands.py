from aiogram import Router
from aiogram.filters import Command
import datetime as dt

from database import db
from data.config import *
from middlewares.checkadmin import CheckAdminMiddleware

router = Router()
router.message.middleware(CheckAdminMiddleware())


def get_lexem_picture(n):
    if n % 100 in (11, 12, 13, 14) or n % 10 in (0, 5, 6, 7, 8, 9):
        return '–∫–∞—Ä—Ç–∏–Ω–æ–∫'
    if n % 10 in (1,):
        return '–∫–∞—Ä—Ç–∏–Ω–∫–∞'
    if n % 10 in (2, 3, 4):
        return '–∫–∞—Ä—Ç–∏–Ω–∫–∏'


@router.message(Command('help', 'start'))
async def info_text(msg):
    query = '''SELECT count(*) as cnt, max(date) as mx FROM cats_info'''

    res = db.select(query)[0]

    query = '''SELECT count(*) as amount FROM cats_info WHERE now()::date = date::date'''

    res_amount = db.select(query)[0]

    message = f'''<b>üîé PickCat Bot üêæ</b>
    
ü§î –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –ø–æ–∏—Å–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ –º–µ–º–æ–≤ —Å –∫–æ—Ç–∏–∫–∞–º–∏.

–ü—Ä–æ—Å—Ç–æ –Ω–∞–±–µ—Ä–∏—Ç–µ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: <code>@pickcat_bot —Ç–µ–∫—Å—Ç</code>.
–í –∑–∞–ø—Ä–æ—Å–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫ <code>/</code> - –≤–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –Ω–µ–≥–æ –Ω–µ –±—É–¥–µ—Ç —É—á—Ç—ë–Ω –ø—Ä–∏ –ø–æ–∏—Å–∫–µ, –æ–¥–Ω–∞–∫–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—Å—è –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ.
    
‚Ä¢ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö <b>{res["cnt"]}</b> {get_lexem_picture(res["cnt"])} üêà
‚Ä¢ –°–µ–≥–æ–¥–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–æ <b>{res_amount["amount"]}</b> {get_lexem_picture(res_amount["amount"])}
‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞ –≤ <b>{res["mx"].strftime("%H:%M, %d %B %Y")}</b> üìù
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—É—â–∏—Ö —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–≤: <b>{len(ADMINS)}</b> ‚úèÔ∏è

–ü–æ–¥–±–æ—Ä –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º <b>–Ω–µ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞</b> –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç—Ä–∏–≥—Ä–∞–º–º.

‚Ä¢ –í—Ä–µ–º—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: <b>{CACHE_TIME} —Å–µ–∫.</b> ‚è±
‚Ä¢ –ß—ë—Ç–∫–æ—Å—Ç—å –Ω–µ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: <b>{round(SIMILARITY * 100, 1)}%</b> üéØ

    <i>Developed by @dragon_iva</i> üòº'''

    await msg.answer(message)


@router.message(Command('ping'))
async def ping(msg):
    message = '<b>Pong!</b>\n'
    try:
        start = dt.datetime.now()
        res = db.select('''SELECT 1 as a''')
        if res[0]["a"] == 1:
            message += f'–û—Ç–≤–µ—Ç <code>work</code>: <b>{round((dt.datetime.now() - start).microseconds / 1000)}ms</b>\n'
        else:
            message += f'–û—Ç–≤–µ—Ç <code>work</code>: <b>-</b>\n'

        start = dt.datetime.now()
        res = db.select('''SELECT * FROM cats_info LIMIT 1''')
        if res[0]["id"]:
            message += f'–û—Ç–≤–µ—Ç <code>db_cats</code>: ' \
                       f'<b>{round((dt.datetime.now() - start).microseconds / 1000)}ms</b>\n'
        else:
            message += f'–û—Ç–≤–µ—Ç <code>db_cats</code>: <b>-</b>\n'

        query = '''
        SELECT id, file_id, text, word_similarity(%s, text) as ratio
        FROM cats_info ci 
        WHERE word_similarity(%s, text) > %s
        ORDER BY ratio DESC, date DESC
        OFFSET %s LIMIT %s
        '''
        text = '–∫–æ—Ç'
        start = dt.datetime.now()
        res = db.select(query, [text, text, SIMILARITY, 0, LIMIT])
        if len(res) > 0:
            message += f'–û—Ç–≤–µ—Ç <code>inline</code>: <b>{round((dt.datetime.now() - start).microseconds / 1000)}ms</b>'
        else:
            message += f'–û—Ç–≤–µ—Ç <code>inline</code>: <b>-</b>'

        await msg.answer(message)
    except Exception as ex:
        await msg.answer(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ <i>{ex}</i>\n–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î...')
        db.reconnect()
        await msg.answer('–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ')


@router.message(Command('restart'), flags={'admin': True})
async def restart(msg):
    import os
    import git

    try:
        await msg.answer('‚ôªÔ∏è –û–±–Ω–æ–≤–ª—è—é —Ñ–∞–π–ª—ã...')
        repo = git.Repo()
        current = repo.head.commit
        repo.remotes.origin.pull()
        if current != repo.head.commit:
            list_updates = []

            for commit in repo.iter_commits():
                if commit == current:
                    break
                list_updates.append(commit.message.strip())

            text_updates = '\n‚Ä¢ '.join(list_updates)

            text = f'‚úÖ –§–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n\n<b>–ù–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã:</b>\n{text_updates}'
            await msg.answer(text)

    except Exception as ex:
        await msg.answer(f'‚ùå –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: <i>{ex}</i>')

    await msg.answer('–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...')
    os.system('systemctl restart pickcatbot')
